version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CX Service Web Application
  web:
    build: .
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - TIME_ZONE=Asia/Jakarta
      - BASE_URL=${BASE_URL}
      
      # Database Configuration
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Message Broker
      - BROKER_URL=redis://redis:6379/0
      
      # Google OAuth2
      - CX_GOOGLE_OAUTH2_CREDENTIALS=${CX_GOOGLE_OAUTH2_CREDENTIALS}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - DD_SERVICE=cx-service
      - DD_ENV=production
      - DD_VERSION=${DD_VERSION}
      
      # Logging
      - LOG_PATH=logs
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - static_volume:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        uv run python src/manage.py migrate &&
        uv run python src/manage.py collectstatic --noinput &&
        uv run gunicorn src.config.wsgi:application --bind 0.0.0.0:8000 --workers 4
      "

  # Celery Worker
  celery:
    build: .
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - BROKER_URL=redis://redis:6379/0
      - LOG_PATH=logs
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: uv run celery -A src.config.settings_celery worker -l info -Q default

volumes:
  postgres_data:
  redis_data:
  static_volume: